{"version":3,"sources":["components/List/MsgList.js","components/Login/Login.js","components/Main/Main.js","App.js","serviceWorker.js","index.js"],"names":["MsgList","listItems","this","props","dataList","List","map","item","ListItem","key","className","nickname","ListItemAvatar","Avatar","ListItemText","secondary","text","Component","Login","handleClose","setState","openDialog","handleOpen","handleChange","event","val","target","value","headerValue","saveData","state","nickName","length","console","log","showError","window","sessionStorage","setItem","Dialog","open","aria-labelledby","DialogTitle","id","DialogContent","DialogContentText","FormControl","Grid","container","justify","alignItems","Radio","checked","onChange","name","alt","src","TextField","required","error","label","ref","defaultValue","DialogActions","Button","onClick","color","socket","io","Main","sendMessage","MsgObj","Date","getTime","getItem","addMessageToList","emit","MsgObject","newArray","push","setTimeout","document","querySelector","scrollTop","showLogin","which","refs","on","msg","Fragment","Container","fixed","AppBar","position","Toolbar","IconButton","edge","aria-label","Typography","variant","fullWidth","placeholder","multiline","rows","margin","onKeyPress","e","enterText","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.684fe517.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport ListItemAvatar from '@material-ui/core/ListItemAvatar';\nimport Avatar from '@material-ui/core/Avatar';\nimport ImageIcon from '@material-ui/icons/Image';\n\nimport \"./MsgList.css\";\n\n\nclass MsgList extends Component{\n  render() {\n    let listItems = this.props.dataList;\n    return (\n      <List>\n        {listItems.map((item) => {\n          return (\n            <ListItem key={item.key} className={item.nickname === '张三' ? 'my-message' : 'people-message'}>\n              <ListItemAvatar>\n                <Avatar>\n                  <ImageIcon />\n                </Avatar>\n              </ListItemAvatar>\n              <ListItemText secondary={item.text} />\n            </ListItem>\n          )\n        })}\n      </List>\n    );\n  }\n}\n\nexport default MsgList;\n","import React, { Component } from 'react';\nimport Button from '@material-ui/core/Button';\nimport FormControl from '@material-ui/core/FormControl';\nimport TextField from '@material-ui/core/TextField';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Radio from '@material-ui/core/Radio';\nimport Avatar from '@material-ui/core/Avatar';\nimport Grid from '@material-ui/core/Grid';\n\nclass Login extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      openDialog: false,\n      showError: false,\n      headerValue: 'a',\n      nickName: \"张三\"\n    };\n  }\n  // 为什么要这样写才能正常被调用？？？\n  handleClose = () => {\n    this.setState({ openDialog: false });\n  }\n  handleOpen = () => {\n    this.setState({ openDialog: true });\n  }\n  handleChange = (event) => {\n    const val = event.target.value;\n    this.setState({ headerValue: val });\n  }\n  // 保存数据\n  saveData = () => {\n    if (this.state.nickName.length === 0) {\n      console.log(\"请输入昵称\");\n      this.setState({ showError: true });\n    }else{\n      this.setState({ showError: false });\n      // 保存在用户本地\n      window.sessionStorage.setItem(\"nickName\",this.state.nickName);\n      window.sessionStorage.setItem(\"headerValue\",this.state.headerValue);\n    }\n  }\n\n  render() {\n    const headerArr = [\n      { key: 'a', value: '/imgs/head_1.jpeg' },\n      { key: 'b', value: '/imgs/head_2.jpeg' },\n      { key: 'c', value: '/imgs/head_3.jpeg' },\n      { key: 'd', value: '/imgs/head_4.jpeg' },\n      { key: 'f', value: '/imgs/head_6.jpeg' }\n    ]\n    return (\n      <div>\n        <Dialog open={this.state.openDialog} aria-labelledby=\"form-dialog-title\">\n          <DialogTitle id=\"form-dialog-title\">初始设置</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              请选择您的头像.\n            </DialogContentText>\n            <FormControl>\n              <Grid container justify=\"center\" alignItems=\"center\">\n                {headerArr.map((item) => {\n                  return (\n                    <div key={item.key}>\n                      <Radio\n                        checked={this.state.headerValue === item.key}\n                        onChange={this.handleChange}\n                        value={item.key}\n                        name=\"radio-button-demo\" />\n                      <Avatar alt=\"\" src={item.value} />\n                    </div>\n                  )\n                })}\n              </Grid>\n            </FormControl>\n            <FormControl>\n              <TextField \n                required\n                error={this.state.showError}\n                label=\"昵称\"\n                name=\"nickName\"\n                ref=\"nickName\"\n                defaultValue={this.state.nickName}\n                onChange={(event) => {\n                  this.setState({nickName:event.target.value})\n                }}\n              />\n            </FormControl>\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={this.handleClose}>\n              取消\n            </Button>\n            <Button color=\"primary\" onClick={this.saveData}>\n              确定\n            </Button>\n          </DialogActions>\n        </Dialog>\n      </div>\n    )\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport Container from '@material-ui/core/Container';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport Typography from '@material-ui/core/Typography';\nimport IconButton from '@material-ui/core/IconButton';\nimport MenuIcon from '@material-ui/icons/Menu';\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\n\nimport MsgList from \"../List/MsgList.js\";\nimport Login from \"../Login/Login.js\";\nimport io from 'socket.io-client';\n\nimport './Main.css';\n\nconst socket = io('http://127.0.0.1:3001');\n\nclass Main extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      // 是否现实登录框\n      showLogin: false,\n      // 数据列表\n      listItems:[]\n    }\n    // socket.on('sendToClient', function(msg){\n    //   console.log('发送过来了新的消息:',msg);\n    // });\n  }\n  /** \n   * 输入文本的监听事件\n   * @method    enterText\n   * @params    {Object}    event     原生 JavaScript 事件对象\n   * @return    {void}\n   */\n  enterText (event) {\n    const val = event.target.value;\n    const keyCode = event.which;\n    \n    if (keyCode === 13) {\n      this.sendMessage(val);\n      event.target.value = \"\";\n    }\n  }\n  sendMessage = (val) => {\n    const MsgObj = {\n      key: new Date().getTime(), \n      nickname: window.sessionStorage.getItem(\"nickName\"),\n      text: val\n    }\n    this.addMessageToList(MsgObj);\n    // 发送一条到服务器\n    socket.emit(\"sentToServer\", MsgObj);\n  }\n  addMessageToList = (MsgObject) => {\n    let newArray = this.state.listItems;\n    newArray.push(MsgObject);\n    this.setState({listItems: newArray});\n    setTimeout(() => {\n      // 在这里做一个动画效果比较好\n      document.querySelector(\".contain-list\").scrollTop = 9999999;\n    }, 500);\n  }\n  // 界面初始化\n  componentDidMount(){\n    // 如果没有 session 那就等于用户下线了，需要重新登陆一次。\n    this.refs['login'].handleOpen();\n\n    socket.on('sendToClient', function(msg){\n      console.log('发送过来了新的消息:',msg);\n    });\n  }\n  // 界面渲染\n  render() {\n    return (\n      <React.Fragment>\n        <Container fixed className=\"main-container\">\n          <AppBar position=\"static\" className=\"app-title\">\n            <Toolbar>\n              <IconButton edge=\"start\" color=\"inherit\" aria-label=\"menu\">\n                <MenuIcon />\n              </IconButton>\n              <Typography variant=\"h6\" className=\"typo-title\">\n                Hello 楽\n              </Typography>\n              <Button color=\"inherit\">在线人数：0</Button>\n            </Toolbar>\n          </AppBar>\n          <div className=\"contain-list\">\n            <MsgList dataList={this.state.listItems}></MsgList>\n          </div>\n          <div className=\"footer\">\n            <TextField\n              fullWidth\n              placeholder=\"请输入您的内容\"\n              multiline\n              rows=\"1\"\n              margin=\"none\"\n              variant=\"outlined\"\n              onKeyPress={(e) => {\n                this.enterText(e);\n              }}\n            />\n          </div>\n        </Container>\n        <Login ref=\"login\"></Login>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Main;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Main from './components/Main/Main';\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Main />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}